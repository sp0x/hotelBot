version: 0.4

#The environment vars you'll use
env:
  NAME: flight_bot
  IMAGE: netlyt/flight_bot
  DIR: /var/netlyt/environments/$IMAGE
  REGISTRY: registry.netlyt.io:5000
  HOST_PORT: 8801
  CONTAINER_PORT: 5000
  USER: vasko

networks:
  # The staging directory
  staging:
    hosts:
      - ibm.netlyt.io

  # Dev envir. for localhost only
  dev:
    env:
      # Extra environment variable for dev hosts only
    hosts:
      - localhost

commands:
  #These commands are just helpers, don't modify them
  ping:
    desc: Print uname and current date/time
    run: uname -a; date

  bash:
    desc: Interactive shell on all hosts
    stdin: true
    run: bash


  pre-build:
    desc: Initialize directory
    run: mkdir -p $PROJDIR$IMAGE

  prepare:
    desc: Build the docker images locally
    local: docker-compose build

  push-local:
    desc: Pushes the image
    local: docker-compose push


  local_build:
    desc: Builkd docker image localy
    local: docker build -t $NAME .

  upload:
    desc: Build Docker image from current directory, push to Docker Hub
    # local: sup $SUP_ENV -f ./builder/Supfile $SUP_NETWORK build
    upload:
      - src: docker-compose.yml
        dst: $DIR
      - src: .env
        dst: $DIR

  debug:
    desc: Debug ..
    local: docker run -it --env-file=.env $NAME

  chat:
    desc: Chat with the bot over cli
    local: docker run -it --env-file=.env $NAME ./test_interaction.py


  train:
    desc: Train model
    local: docker run --env-file=.env $NAME __init__.py --train


  config:
    desc: Upload/test config file.
    upload:
      - src: ./example.$SUP_NETWORK.cfg
        dst: $PROJDIR$IMAGE
    run: test -f $PROJDIR$IMAGE/example.$SUP_NETWORK.cfg


  local_start_shell:
    desc: Run docker interactive
    local: >
      docker run --env-file=.env -it $NAME

  pull:
    desc: Pull latest Docker image
    run: sudo docker-compose pull
    chdir: $DIR

  stop:
    desc: Stop Docker container
    run: sudo docker-compose stop $SERVICE_NAME || exit 0
    chdir: $DIR

  rm:
    desc: Remove Docker container
    run: sudo docker-compose rm -f $SERVICE_NAME || exit 0
    chdir: $DIR

  start:
    desc: Start a stopped Docker container
    run: sudo docker-compose start $SERVICE_NAME || exit 0
    chdir: $DIR

  run:
    desc: Run Docker container
    run: sudo docker-compose up -d $SERVICE_NAME
    chdir: $DIR


  restart:
    desc: Restart Docker container
    run: sudo docker-compose restart $SERVICE_NAME || exit 0
    chdir: $DIR

  stop-rm-run:
    desc: Rolling update (stop & remove old Docker container, run new one)
    run: sudo docker-compose stop $SERVICE_NAME; sudo docker-compose rm -f $SERVICE_NAME; sudo docker-compose up -d $SERVICE_NAME
    serial: 1
    chdir: $DIR

  ps:
    desc: List running Docker containers
    run: sudo docker-compose ps
    chdir: $DIR

  logs:
    desc: Docker logs
    run: sudo docker-compose logs $SERVICE_NAME
    chdir: $DIR

  tail-logs:
    desc: Tail Docker logs
    run: sudo docker-compose logs -f --tail 10 $SERVICE_NAME
    chdir: $DIR

  health:
    desc: Application health check
    run: curl localhost:$HOST_PORT

  slack-notify:
    desc: Notify Slack about new deployment
    run: >
      curl -X POST --data-urlencode 'payload={"channel": "#dev", "text": "['$SUP_NETWORK'] '$SUP_USER' deployed '$IMAGE'. Access through http://'$(curl ifconfig.co):$HOST_PORT'"}' \
        https://hooks.slack.com/services/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


targets:
  #The deployment target command, it runs multiple commands one after another, ensuring the previous one returned 0
  deploy:
    - pre-build
    - prepare
    - push-local
    - upload
    - pull
    - stop-rm-run
    - ps
    - logs
    - slack-notify
